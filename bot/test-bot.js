const express = require('express');
const cors = require('cors');
const { v4: uuidv4 } = require('uuid');

// Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è API (—Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ Telegram –±–æ—Ç–∞)
const app = express();
const PORT = process.env.BOT_PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
const gameSessions = new Map();
const userSessions = new Map();

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
app.get('/', (req, res) => {
  res.json({
    message: 'üé∞ Nimble Roulette Bot API —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    status: 'running',
    timestamp: new Date().toISOString(),
    endpoints: [
      'GET / - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ',
      'GET /api/game/:sessionId - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã',
      'POST /api/game - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã',
      'POST /api/game/:sessionId/complete - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã',
      'GET /api/user/:userId/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    ]
  });
});

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
app.get('/api/game/:sessionId', (req, res) => {
  const { sessionId } = req.params;
  const gameSession = gameSessions.get(sessionId);
  
  if (!gameSession) {
    return res.status(404).json({ error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }
  
  res.json(gameSession);
});

// API endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
app.post('/api/game', (req, res) => {
  const { userId, username, bet, betType, betValue } = req.body;
  
  if (!userId || !bet || !betType) {
    return res.status(400).json({ 
      error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è: userId, bet, betType' 
    });
  }
  
  const sessionId = uuidv4();
  const gameSession = {
    id: sessionId,
    userId: parseInt(userId),
    username: username || 'anonymous',
    bet: parseInt(bet),
    betType, // 'number', 'color', 'even_odd'
    betValue: betValue || null,
    status: 'pending',
    result: null,
    winnings: 0,
    createdAt: new Date().toISOString()
  };
  
  gameSessions.set(sessionId, gameSession);
  
  console.log(`üéÆ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∏–≥—Ä–∞: ${sessionId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  
  res.json({ sessionId, gameSession });
});

// API endpoint –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
app.post('/api/game/:sessionId/complete', (req, res) => {
  const { sessionId } = req.params;
  const { result, winnings } = req.body;
  
  const gameSession = gameSessions.get(sessionId);
  if (!gameSession) {
    return res.status(404).json({ error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }
  
  gameSession.status = 'completed';
  gameSession.result = result;
  gameSession.winnings = winnings;
  gameSession.completedAt = new Date().toISOString();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userId = gameSession.userId;
  const userSession = userSessions.get(userId) || {
    gamesPlayed: 0,
    totalWinnings: 0,
    bestWin: 0
  };
  
  userSession.gamesPlayed += 1;
  userSession.totalWinnings += winnings;
  if (winnings > userSession.bestWin) {
    userSession.bestWin = winnings;
  }
  
  userSessions.set(userId, userSession);
  
  console.log(`üéØ –ò–≥—Ä–∞ ${sessionId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result}, –í—ã–∏–≥—Ä—ã—à: ${winnings}‚ÇΩ`);
  
  res.json({ success: true, gameSession });
});

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user/:userId/stats', (req, res) => {
  const { userId } = req.params;
  const userSession = userSessions.get(parseInt(userId)) || {
    gamesPlayed: 0,
    totalWinnings: 0,
    bestWin: 0
  };
  
  res.json(userSession);
});

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
app.get('/api/games', (req, res) => {
  const activeGames = Array.from(gameSessions.values())
    .filter(game => game.status === 'pending');
  
  res.json({
    activeGames,
    totalGames: gameSessions.size,
    activeCount: activeGames.length
  });
});

// API endpoint –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∏–≥—Ä (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
app.delete('/api/games/clear', (req, res) => {
  const beforeCount = gameSessions.size;
  gameSessions.clear();
  userSessions.clear();
  
  res.json({
    message: '–í—Å–µ –∏–≥—Ä—ã –æ—á–∏—â–µ–Ω—ã',
    clearedGames: beforeCount
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì° API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
  console.log(`üß™ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ: npm run test:api`);
  console.log('');
  console.log('üé∞ Nimble Roulette Test Bot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
});

module.exports = app; 