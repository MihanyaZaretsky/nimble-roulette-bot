const axios = require('axios');

const API_BASE_URL = 'http://localhost:3000/api';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testUser = {
  userId: 123456789,
  username: 'testuser',
  bet: 100,
  betType: 'number',
  betValue: 7
};

async function testAPI() {
  console.log('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...\n');

  try {
    // 1. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    console.log('1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã...');
    const createResponse = await axios.post(`${API_BASE_URL}/game`, testUser);
    const { sessionId, gameSession } = createResponse.data;
    console.log('‚úÖ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞:', { sessionId, gameSession });
    console.log('');

    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
    console.log('2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã...');
    const getGameResponse = await axios.get(`${API_BASE_URL}/game/${sessionId}`);
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –ø–æ–ª—É—á–µ–Ω—ã:', getGameResponse.data);
    console.log('');

    // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const statsResponse = await axios.get(`${API_BASE_URL}/user/${testUser.userId}/stats`);
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', statsResponse.data);
    console.log('');

    // 4. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã (–≤—ã–∏–≥—Ä—ã—à)
    console.log('4Ô∏è‚É£ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã (–≤—ã–∏–≥—Ä—ã—à)...');
    const winResponse = await axios.post(`${API_BASE_URL}/game/${sessionId}/complete`, {
      result: 7,
      winnings: 3500
    });
    console.log('‚úÖ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–≤—ã–∏–≥—Ä—ã—à):', winResponse.data);
    console.log('');

    // 5. –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∏–≥—Ä—ã
    console.log('5Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∏–≥—Ä—ã...');
    const createResponse2 = await axios.post(`${API_BASE_URL}/game`, {
      ...testUser,
      betValue: 15
    });
    const { sessionId: sessionId2 } = createResponse2.data;
    console.log('‚úÖ –í—Ç–æ—Ä–∞—è –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞:', sessionId2);
    console.log('');

    // 6. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∏–≥—Ä—ã (–ø—Ä–æ–∏–≥—Ä—ã—à)
    console.log('6Ô∏è‚É£ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∏–≥—Ä—ã (–ø—Ä–æ–∏–≥—Ä—ã—à)...');
    const loseResponse = await axios.post(`${API_BASE_URL}/game/${sessionId2}/complete`, {
      result: 22,
      winnings: 0
    });
    console.log('‚úÖ –í—Ç–æ—Ä–∞—è –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–ø—Ä–æ–∏–≥—Ä—ã—à):', loseResponse.data);
    console.log('');

    // 7. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('7Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const finalStatsResponse = await axios.get(`${API_BASE_URL}/user/${testUser.userId}/stats`);
    console.log('‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', finalStatsResponse.data);
    console.log('');

    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.response?.data || error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  testAPI();
}

module.exports = { testAPI }; 