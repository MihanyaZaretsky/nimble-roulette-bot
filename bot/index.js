const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const cors = require('cors');
const { v4: uuidv4 } = require('uuid');
require('dotenv').config();

// –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª-–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
const fs = require('fs');
const path = require('path');
const lockFile = path.join(__dirname, 'bot.lock');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –±–æ—Ç
if (fs.existsSync(lockFile)) {
  const lockData = JSON.parse(fs.readFileSync(lockFile, 'utf8'));
  const now = Date.now();
  
  // –ï—Å–ª–∏ —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å—Ç–∞—Ä—à–µ 30 —Å–µ–∫—É–Ω–¥, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å —É–º–µ—Ä
  if (now - lockData.timestamp < 30000) {
    console.log('‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ –¥—Ä—É–≥–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ. –ó–∞–≤–µ—Ä—à–∞–µ–º...');
    process.exit(0);
  }
}

// –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
const lockData = {
  pid: process.pid,
  timestamp: Date.now(),
  instance: process.env.BOT_INSTANCE || 'main'
};

fs.writeFileSync(lockFile, JSON.stringify(lockData));

// –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
process.on('exit', () => {
  if (fs.existsSync(lockFile)) {
    fs.unlinkSync(lockFile);
  }
});

process.on('SIGINT', () => {
  if (fs.existsSync(lockFile)) {
    fs.unlinkSync(lockFile);
  }
  process.exit(0);
});

process.on('SIGTERM', () => {
  if (fs.existsSync(lockFile)) {
    fs.unlinkSync(lockFile);
  }
  process.exit(0);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const botToken = '7335736665:AAHG3rBQQ_zjE6qourTYqHaTvuKDnczztgM';
let bot;

try {
  bot = new TelegramBot(botToken, { 
    polling: true,
    polling_id: process.env.BOT_INSTANCE || 'main'
  });
  
  console.log('ü§ñ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ç–æ–∫–µ–Ω–æ–º');
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error.message);
  if (fs.existsSync(lockFile)) {
    fs.unlinkSync(lockFile);
  }
  process.exit(1);
}

// Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è API
const app = express();
const PORT = process.env.BOT_PORT || 3001;

// Middleware
app.use(cors());
app.use(express.json());

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
const gameSessions = new Map();
const userSessions = new Map();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const username = msg.from.username || msg.from.first_name;
  
  console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} (${userId}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞`);
  
  const welcomeMessage = `
üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Nimble Roulette!

üéÆ –≠—Ç–æ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã –≤ —Ä—É–ª–µ—Ç–∫—É –ø—Ä—è–º–æ –≤ Telegram.

üöÄ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É:
  `;
  
  const keyboard = {
    inline_keyboard: [[
      {
        text: 'üéÆ –ò–≥—Ä–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫—É',
        web_app: { url: `https://quest.somnia.network/campaigns/68?user=${userId}&username=${username}` }
      }
    ]]
  };
  
  await bot.sendMessage(chatId, welcomeMessage, {
    reply_markup: keyboard,
    parse_mode: 'HTML'
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
bot.onText(/\/help/, async (msg) => {
  const chatId = msg.chat.id;
  
  const helpMessage = `
üé∞ <b>Nimble Roulette - –ü–æ–º–æ—â—å</b>

üéÆ <b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ò–≥—Ä–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫—É"
2. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É –∏ —á–∏—Å–ª–æ
3. –ö—Ä—É—Ç–∏—Ç–µ —Ä—É–ª–µ—Ç–∫—É!
4. –ü–æ–ª—É—á–∞–π—Ç–µ –≤—ã–∏–≥—Ä—ã—à–∏

üí∞ <b>–ü—Ä–∞–≤–∏–ª–∞:</b>
‚Ä¢ –°—Ç–∞–≤—å—Ç–µ –Ω–∞ —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 36
‚Ä¢ –ö—Ä–∞—Å–Ω—ã–µ —á–∏—Å–ª–∞: 1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36
‚Ä¢ –ß–µ—Ä–Ω—ã–µ —á–∏—Å–ª–∞: 2,4,6,8,10,11,13,15,17,20,22,24,26,28,29,31,33,35
‚Ä¢ 0 - –∑–µ–ª–µ–Ω–æ–µ —á–∏—Å–ª–æ

üéØ <b>–í—ã–∏–≥—Ä—ã—à–∏:</b>
‚Ä¢ –£–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ: x35
‚Ä¢ –£–≥–∞–¥–∞–ª–∏ —Ü–≤–µ—Ç: x2
‚Ä¢ –£–≥–∞–¥–∞–ª–∏ —á–µ—Ç/–Ω–µ—á–µ—Ç: x2

üí° <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  `;
  
  await bot.sendMessage(chatId, helpMessage, { parse_mode: 'HTML' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats
bot.onText(/\/stats/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  const userSession = userSessions.get(userId) || {
    gamesPlayed: 0,
    totalWinnings: 0,
    bestWin: 0
  };
  
  const statsMessage = `
üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>

üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: ${userSession.gamesPlayed}
üí∞ –û–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à: ${userSession.totalWinnings}‚ÇΩ
üèÜ –õ—É—á—à–∏–π –≤—ã–∏–≥—Ä—ã—à: ${userSession.bestWin}‚ÇΩ
  `;
  
  await bot.sendMessage(chatId, statsMessage, { parse_mode: 'HTML' });
});

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
app.get('/api/game/:sessionId', (req, res) => {
  const { sessionId } = req.params;
  const gameSession = gameSessions.get(sessionId);
  
  if (!gameSession) {
    return res.status(404).json({ error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }
  
  res.json(gameSession);
});

// API endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
app.post('/api/game', (req, res) => {
  const { userId, username, bet, betType } = req.body;
  
  const sessionId = uuidv4();
  const gameSession = {
    id: sessionId,
    userId,
    username,
    bet: parseInt(bet),
    betType, // 'number', 'color', 'even_odd'
    betValue: req.body.betValue,
    status: 'pending',
    result: null,
    winnings: 0,
    createdAt: new Date().toISOString()
  };
  
  gameSessions.set(sessionId, gameSession);
  
  res.json({ sessionId, gameSession });
});

// API endpoint –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
app.post('/api/game/:sessionId/complete', (req, res) => {
  const { sessionId } = req.params;
  const { result, winnings } = req.body;
  
  const gameSession = gameSessions.get(sessionId);
  if (!gameSession) {
    return res.status(404).json({ error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }
  
  gameSession.status = 'completed';
  gameSession.result = result;
  gameSession.winnings = winnings;
  gameSession.completedAt = new Date().toISOString();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userId = gameSession.userId;
  const userSession = userSessions.get(userId) || {
    gamesPlayed: 0,
    totalWinnings: 0,
    bestWin: 0
  };
  
  userSession.gamesPlayed += 1;
  userSession.totalWinnings += winnings;
  if (winnings > userSession.bestWin) {
    userSession.bestWin = winnings;
  }
  
  userSessions.set(userId, userSession);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  const message = winnings > 0 
    ? `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${winnings}‚ÇΩ!`
    : `üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ${gameSession.bet}‚ÇΩ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!`;
  
  bot.sendMessage(userId, message);
  
  res.json({ success: true, gameSession });
});

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user/:userId/stats', (req, res) => {
  const { userId } = req.params;
  const userSession = userSessions.get(userId) || {
    gamesPlayed: 0,
    totalWinnings: 0,
    bestWin: 0
  };
  
  res.json(userSession);
});

// Health check endpoint –¥–ª—è Render
app.get('/', (req, res) => {
  res.json({ 
    status: 'ok', 
    message: 'Nimble Roulette Bot is running',
    timestamp: new Date().toISOString()
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
  console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
});

bot.on('polling_error', (error) => {
  if (error.code === 'ETELEGRAM' && error.response.body.error_code === 409) {
    console.log('‚ö†Ô∏è –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–≤–µ—Ä—à–∞–µ–º —ç—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å...');
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ
    setTimeout(() => {
      if (fs.existsSync(lockFile)) {
        fs.unlinkSync(lockFile);
      }
      process.exit(0);
    }, 1000);
  } else {
    console.error('–û—à–∏–±–∫–∞ polling:', error);
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üé∞ Nimble Roulette Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...`);
  console.log(`ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì° API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
}); 