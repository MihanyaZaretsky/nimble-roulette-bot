import React, { useState, useEffect } from 'react';
import './App.css';

function App() {
  const [user, setUser] = useState(null);
  const [bet, setBet] = useState(100);
  const [betType, setBetType] = useState('number');
  const [betValue, setBetValue] = useState(7);
  const [isSpinning, setIsSpinning] = useState(false);
  const [result, setResult] = useState(null);
  const [winnings, setWinnings] = useState(0);
  const [sessionId, setSessionId] = useState(null);

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
    if (window.Telegram && window.Telegram.WebApp) {
      const tg = window.Telegram.WebApp;
      tg.ready();
      tg.expand();
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      const urlParams = new URLSearchParams(window.location.search);
      const userId = urlParams.get('user');
      const username = urlParams.get('username');
      
      if (userId && username) {
        setUser({ id: userId, username });
      }
      
      console.log('Telegram Web App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
  }, []);

  const createGame = async () => {
    if (!user) return;
    
    try {
      const response = await fetch('/api/game', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: user.id,
          username: user.username,
          bet: parseInt(bet),
          betType,
          betValue: betValue ? parseInt(betValue) : null
        })
      });
      
      const data = await response.json();
      setSessionId(data.sessionId);
      return data.sessionId;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã:', error);
      return null;
    }
  };

  const spinRoulette = async () => {
    if (!sessionId) return;
    
    setIsSpinning(true);
    
    // –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è —Ä—É–ª–µ—Ç–∫–∏
    setTimeout(async () => {
      const rouletteResult = Math.floor(Math.random() * 37); // 0-36
      setResult(rouletteResult);
      
      // –†–∞—Å—á–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∞
      let winAmount = 0;
      if (betType === 'number' && betValue === rouletteResult) {
        winAmount = bet * 35;
      } else if (betType === 'color') {
        const redNumbers = [1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36];
        const isRed = redNumbers.includes(rouletteResult);
        const isBetRed = betValue === 'red';
        if ((isRed && isBetRed) || (!isRed && !isBetRed && rouletteResult !== 0)) {
          winAmount = bet * 2;
        }
      } else if (betType === 'even_odd') {
        if (rouletteResult !== 0) {
          const isEven = rouletteResult % 2 === 0;
          const isBetEven = betValue === 'even';
          if (isEven === isBetEven) {
            winAmount = bet * 2;
          }
        }
      }
      
      setWinnings(winAmount);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      try {
        await fetch(`/api/game/${sessionId}/complete`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            result: rouletteResult,
            winnings: winAmount
          })
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã:', error);
      }
      
      setIsSpinning(false);
    }, 2000);
  };

  const startGame = async () => {
    const newSessionId = await createGame();
    if (newSessionId) {
      await spinRoulette();
    }
  };

  const getNumberColor = (number) => {
    if (number === 0) return 'green';
    const redNumbers = [1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36];
    return redNumbers.includes(number) ? 'red' : 'black';
  };

  return (
    <div className="App">
      <div className="container">
        <h1>üé∞ Nimble Roulette</h1>
        
        {user && (
          <div className="user-info">
            <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.username}!</p>
          </div>
        )}
        
        <div className="game-section">
          <h2>üéÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã</h2>
          
          <div className="bet-settings">
            <div className="setting">
              <label>–°—Ç–∞–≤–∫–∞:</label>
              <input
                type="number"
                value={bet}
                onChange={(e) => setBet(e.target.value)}
                min="10"
                max="10000"
              />
            </div>
            
            <div className="setting">
              <label>–¢–∏–ø —Å—Ç–∞–≤–∫–∏:</label>
              <select value={betType} onChange={(e) => setBetType(e.target.value)}>
                <option value="number">–ù–∞ —á–∏—Å–ª–æ</option>
                <option value="color">–ù–∞ —Ü–≤–µ—Ç</option>
                <option value="even_odd">–ß–µ—Ç/–Ω–µ—á–µ—Ç</option>
              </select>
            </div>
            
            {betType === 'number' && (
              <div className="setting">
                <label>–ß–∏—Å–ª–æ (0-36):</label>
                <input
                  type="number"
                  value={betValue}
                  onChange={(e) => setBetValue(e.target.value)}
                  min="0"
                  max="36"
                />
              </div>
            )}
            
            {betType === 'color' && (
              <div className="setting">
                <label>–¶–≤–µ—Ç:</label>
                <select value={betValue} onChange={(e) => setBetValue(e.target.value)}>
                  <option value="red">–ö—Ä–∞—Å–Ω—ã–π</option>
                  <option value="black">–ß–µ—Ä–Ω—ã–π</option>
                </select>
              </div>
            )}
            
            {betType === 'even_odd' && (
              <div className="setting">
                <label>–í—ã–±–æ—Ä:</label>
                <select value={betValue} onChange={(e) => setBetValue(e.target.value)}>
                  <option value="even">–ß–µ—Ç–Ω–æ–µ</option>
                  <option value="odd">–ù–µ—á–µ—Ç–Ω–æ–µ</option>
                </select>
              </div>
            )}
          </div>
          
          <button 
            className="spin-button"
            onClick={startGame}
            disabled={isSpinning}
          >
            {isSpinning ? 'üé≤ –ö—Ä—É—Ç–∏—Ç—Å—è...' : 'üé≤ –ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É!'}
          </button>
        </div>
        
        {isSpinning && (
          <div className="spinning">
            <div className="spinner">üé∞</div>
            <p>–†—É–ª–µ—Ç–∫–∞ –∫—Ä—É—Ç–∏—Ç—Å—è...</p>
          </div>
        )}
        
        {result !== null && !isSpinning && (
          <div className="result-section">
            <h2>üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç</h2>
            <div className={`result-number ${getNumberColor(result)}`}>
              {result}
            </div>
            
            {winnings > 0 ? (
              <div className="win-message">
                <h3>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h3>
                <p>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings}‚ÇΩ!</p>
              </div>
            ) : (
              <div className="lose-message">
                <h3>üòî –ù–µ –ø–æ–≤–µ–∑–ª–æ</h3>
                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!</p>
              </div>
            )}
            
            <button 
              className="play-again-button"
              onClick={() => {
                setResult(null);
                setWinnings(0);
                setSessionId(null);
              }}
            >
              üéÆ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
          </div>
        )}
        
        <div className="rules">
          <h3>üìã –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã</h3>
          <ul>
            <li><strong>–ù–∞ —á–∏—Å–ª–æ:</strong> –≤—ã–∏–≥—Ä—ã—à x35</li>
            <li><strong>–ù–∞ —Ü–≤–µ—Ç:</strong> –≤—ã–∏–≥—Ä—ã—à x2</li>
            <li><strong>–ß–µ—Ç/–Ω–µ—á–µ—Ç:</strong> –≤—ã–∏–≥—Ä—ã—à x2</li>
          </ul>
        </div>
      </div>
    </div>
  );
}

export default App;
